// Mocks generated by Mockito 5.4.4 from annotations
// in mtg_picker/test/ui/controllers/filter_bottom_sheet_controller/filter_bottom_sheet_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIterator_0<E> extends _i1.SmartFake implements Iterator<E> {
  _FakeIterator_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeColor_1 extends _i1.SmartFake implements _i2.Color {
  _FakeColor_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Set].
///
/// See the documentation for Mockito's code generation for more information.
class MockSet extends _i1.Mock implements Set<_i2.Color> {
  @override
  Iterator<_i2.Color> get iterator => (super.noSuchMethod(
        Invocation.getter(#iterator),
        returnValue: _FakeIterator_0<_i2.Color>(
          this,
          Invocation.getter(#iterator),
        ),
        returnValueForMissingStub: _FakeIterator_0<_i2.Color>(
          this,
          Invocation.getter(#iterator),
        ),
      ) as Iterator<_i2.Color>);

  @override
  int get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  bool get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isNotEmpty => (super.noSuchMethod(
        Invocation.getter(#isNotEmpty),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.Color get first => (super.noSuchMethod(
        Invocation.getter(#first),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#first),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#first),
        ),
      ) as _i2.Color);

  @override
  _i2.Color get last => (super.noSuchMethod(
        Invocation.getter(#last),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#last),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#last),
        ),
      ) as _i2.Color);

  @override
  _i2.Color get single => (super.noSuchMethod(
        Invocation.getter(#single),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#single),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#single),
        ),
      ) as _i2.Color);

  @override
  Set<R> cast<R>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: <R>{},
        returnValueForMissingStub: <R>{},
      ) as Set<R>);

  @override
  bool contains(Object? value) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [value],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool add(_i2.Color? value) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [value],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void addAll(Iterable<_i2.Color>? elements) => super.noSuchMethod(
        Invocation.method(
          #addAll,
          [elements],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool remove(Object? value) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [value],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void removeAll(Iterable<Object?>? elements) => super.noSuchMethod(
        Invocation.method(
          #removeAll,
          [elements],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void retainAll(Iterable<Object?>? elements) => super.noSuchMethod(
        Invocation.method(
          #retainAll,
          [elements],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeWhere(bool Function(_i2.Color)? test) => super.noSuchMethod(
        Invocation.method(
          #removeWhere,
          [test],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void retainWhere(bool Function(_i2.Color)? test) => super.noSuchMethod(
        Invocation.method(
          #retainWhere,
          [test],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool containsAll(Iterable<Object?>? other) => (super.noSuchMethod(
        Invocation.method(
          #containsAll,
          [other],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  Set<_i2.Color> intersection(Set<Object?>? other) => (super.noSuchMethod(
        Invocation.method(
          #intersection,
          [other],
        ),
        returnValue: <_i2.Color>{},
        returnValueForMissingStub: <_i2.Color>{},
      ) as Set<_i2.Color>);

  @override
  Set<_i2.Color> union(Set<_i2.Color>? other) => (super.noSuchMethod(
        Invocation.method(
          #union,
          [other],
        ),
        returnValue: <_i2.Color>{},
        returnValueForMissingStub: <_i2.Color>{},
      ) as Set<_i2.Color>);

  @override
  Set<_i2.Color> difference(Set<Object?>? other) => (super.noSuchMethod(
        Invocation.method(
          #difference,
          [other],
        ),
        returnValue: <_i2.Color>{},
        returnValueForMissingStub: <_i2.Color>{},
      ) as Set<_i2.Color>);

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Set<_i2.Color> toSet() => (super.noSuchMethod(
        Invocation.method(
          #toSet,
          [],
        ),
        returnValue: <_i2.Color>{},
        returnValueForMissingStub: <_i2.Color>{},
      ) as Set<_i2.Color>);

  @override
  Iterable<_i2.Color> followedBy(Iterable<_i2.Color>? other) =>
      (super.noSuchMethod(
        Invocation.method(
          #followedBy,
          [other],
        ),
        returnValue: <_i2.Color>[],
        returnValueForMissingStub: <_i2.Color>[],
      ) as Iterable<_i2.Color>);

  @override
  Iterable<T> map<T>(T Function(_i2.Color)? toElement) => (super.noSuchMethod(
        Invocation.method(
          #map,
          [toElement],
        ),
        returnValue: <T>[],
        returnValueForMissingStub: <T>[],
      ) as Iterable<T>);

  @override
  Iterable<_i2.Color> where(bool Function(_i2.Color)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #where,
          [test],
        ),
        returnValue: <_i2.Color>[],
        returnValueForMissingStub: <_i2.Color>[],
      ) as Iterable<_i2.Color>);

  @override
  Iterable<T> whereType<T>() => (super.noSuchMethod(
        Invocation.method(
          #whereType,
          [],
        ),
        returnValue: <T>[],
        returnValueForMissingStub: <T>[],
      ) as Iterable<T>);

  @override
  Iterable<T> expand<T>(Iterable<T> Function(_i2.Color)? toElements) =>
      (super.noSuchMethod(
        Invocation.method(
          #expand,
          [toElements],
        ),
        returnValue: <T>[],
        returnValueForMissingStub: <T>[],
      ) as Iterable<T>);

  @override
  void forEach(void Function(_i2.Color)? action) => super.noSuchMethod(
        Invocation.method(
          #forEach,
          [action],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Color reduce(
          _i2.Color Function(
            _i2.Color,
            _i2.Color,
          )? combine) =>
      (super.noSuchMethod(
        Invocation.method(
          #reduce,
          [combine],
        ),
        returnValue: _FakeColor_1(
          this,
          Invocation.method(
            #reduce,
            [combine],
          ),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.method(
            #reduce,
            [combine],
          ),
        ),
      ) as _i2.Color);

  @override
  T fold<T>(
    T? initialValue,
    T Function(
      T,
      _i2.Color,
    )? combine,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fold,
          [
            initialValue,
            combine,
          ],
        ),
        returnValue: _i3.dummyValue<T>(
          this,
          Invocation.method(
            #fold,
            [
              initialValue,
              combine,
            ],
          ),
        ),
        returnValueForMissingStub: _i3.dummyValue<T>(
          this,
          Invocation.method(
            #fold,
            [
              initialValue,
              combine,
            ],
          ),
        ),
      ) as T);

  @override
  bool every(bool Function(_i2.Color)? test) => (super.noSuchMethod(
        Invocation.method(
          #every,
          [test],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  String join([String? separator = r'']) => (super.noSuchMethod(
        Invocation.method(
          #join,
          [separator],
        ),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.method(
            #join,
            [separator],
          ),
        ),
        returnValueForMissingStub: _i3.dummyValue<String>(
          this,
          Invocation.method(
            #join,
            [separator],
          ),
        ),
      ) as String);

  @override
  bool any(bool Function(_i2.Color)? test) => (super.noSuchMethod(
        Invocation.method(
          #any,
          [test],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  List<_i2.Color> toList({bool? growable = true}) => (super.noSuchMethod(
        Invocation.method(
          #toList,
          [],
          {#growable: growable},
        ),
        returnValue: <_i2.Color>[],
        returnValueForMissingStub: <_i2.Color>[],
      ) as List<_i2.Color>);

  @override
  Iterable<_i2.Color> take(int? count) => (super.noSuchMethod(
        Invocation.method(
          #take,
          [count],
        ),
        returnValue: <_i2.Color>[],
        returnValueForMissingStub: <_i2.Color>[],
      ) as Iterable<_i2.Color>);

  @override
  Iterable<_i2.Color> takeWhile(bool Function(_i2.Color)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #takeWhile,
          [test],
        ),
        returnValue: <_i2.Color>[],
        returnValueForMissingStub: <_i2.Color>[],
      ) as Iterable<_i2.Color>);

  @override
  Iterable<_i2.Color> skip(int? count) => (super.noSuchMethod(
        Invocation.method(
          #skip,
          [count],
        ),
        returnValue: <_i2.Color>[],
        returnValueForMissingStub: <_i2.Color>[],
      ) as Iterable<_i2.Color>);

  @override
  Iterable<_i2.Color> skipWhile(bool Function(_i2.Color)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #skipWhile,
          [test],
        ),
        returnValue: <_i2.Color>[],
        returnValueForMissingStub: <_i2.Color>[],
      ) as Iterable<_i2.Color>);

  @override
  _i2.Color firstWhere(
    bool Function(_i2.Color)? test, {
    _i2.Color Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #firstWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _FakeColor_1(
          this,
          Invocation.method(
            #firstWhere,
            [test],
            {#orElse: orElse},
          ),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.method(
            #firstWhere,
            [test],
            {#orElse: orElse},
          ),
        ),
      ) as _i2.Color);

  @override
  _i2.Color lastWhere(
    bool Function(_i2.Color)? test, {
    _i2.Color Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #lastWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _FakeColor_1(
          this,
          Invocation.method(
            #lastWhere,
            [test],
            {#orElse: orElse},
          ),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.method(
            #lastWhere,
            [test],
            {#orElse: orElse},
          ),
        ),
      ) as _i2.Color);

  @override
  _i2.Color singleWhere(
    bool Function(_i2.Color)? test, {
    _i2.Color Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #singleWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _FakeColor_1(
          this,
          Invocation.method(
            #singleWhere,
            [test],
            {#orElse: orElse},
          ),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.method(
            #singleWhere,
            [test],
            {#orElse: orElse},
          ),
        ),
      ) as _i2.Color);

  @override
  _i2.Color elementAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #elementAt,
          [index],
        ),
        returnValue: _FakeColor_1(
          this,
          Invocation.method(
            #elementAt,
            [index],
          ),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.method(
            #elementAt,
            [index],
          ),
        ),
      ) as _i2.Color);
}
