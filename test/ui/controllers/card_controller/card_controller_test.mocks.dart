// Mocks generated by Mockito 5.4.4 from annotations
// in mtg_picker/test/ui/controllers/card_controller/card_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:mtg_picker/application/repository/cards/cards_repository.dart'
    as _i4;
import 'package:mtg_picker/application/repository/repository_error.dart' as _i6;
import 'package:mtg_picker/domain/entities/card/card.dart' as _i3;
import 'package:mtg_picker/internal/entities/either.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _Fake$CardsCopyWith_1<$Res> extends _i1.SmartFake
    implements _i3.$CardsCopyWith<$Res> {
  _Fake$CardsCopyWith_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CardsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCardsRepository extends _i1.Mock implements _i4.CardsRepository {
  @override
  _i5.Future<_i2.Either<_i6.RepositoryError, List<_i3.Cards>>> getCards(
          {int? page}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCards,
          [],
          {#page: page},
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.RepositoryError, List<_i3.Cards>>>.value(
                _FakeEither_0<_i6.RepositoryError, List<_i3.Cards>>(
          this,
          Invocation.method(
            #getCards,
            [],
            {#page: page},
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i6.RepositoryError, List<_i3.Cards>>>.value(
                _FakeEither_0<_i6.RepositoryError, List<_i3.Cards>>(
          this,
          Invocation.method(
            #getCards,
            [],
            {#page: page},
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.RepositoryError, List<_i3.Cards>>>);
}

/// A class which mocks [Either].
///
/// See the documentation for Mockito's code generation for more information.
class MockEither extends _i1.Mock
    implements _i2.Either<_i6.RepositoryError, List<_i3.Cards>> {
  @override
  bool get isLeft => (super.noSuchMethod(
        Invocation.getter(#isLeft),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isRight => (super.noSuchMethod(
        Invocation.getter(#isRight),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  B resolve<B>(
    B Function(_i6.RepositoryError)? ifLeft,
    B Function(List<_i3.Cards>)? ifRight,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #resolve,
          [
            ifLeft,
            ifRight,
          ],
        ),
        returnValue: _i7.dummyValue<B>(
          this,
          Invocation.method(
            #resolve,
            [
              ifLeft,
              ifRight,
            ],
          ),
        ),
        returnValueForMissingStub: _i7.dummyValue<B>(
          this,
          Invocation.method(
            #resolve,
            [
              ifLeft,
              ifRight,
            ],
          ),
        ),
      ) as B);
}

/// A class which mocks [RepositoryError].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepositoryError extends _i1.Mock implements _i6.RepositoryError {}

/// A class which mocks [Cards].
///
/// See the documentation for Mockito's code generation for more information.
class MockCards extends _i1.Mock implements _i3.Cards {
  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  String get manaCost => (super.noSuchMethod(
        Invocation.getter(#manaCost),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#manaCost),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#manaCost),
        ),
      ) as String);

  @override
  String get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#type),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#type),
        ),
      ) as String);

  @override
  String get rarity => (super.noSuchMethod(
        Invocation.getter(#rarity),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#rarity),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#rarity),
        ),
      ) as String);

  @override
  String get imageUrl => (super.noSuchMethod(
        Invocation.getter(#imageUrl),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#imageUrl),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#imageUrl),
        ),
      ) as String);

  @override
  _i3.$CardsCopyWith<_i3.Cards> get copyWith => (super.noSuchMethod(
        Invocation.getter(#copyWith),
        returnValue: _Fake$CardsCopyWith_1<_i3.Cards>(
          this,
          Invocation.getter(#copyWith),
        ),
        returnValueForMissingStub: _Fake$CardsCopyWith_1<_i3.Cards>(
          this,
          Invocation.getter(#copyWith),
        ),
      ) as _i3.$CardsCopyWith<_i3.Cards>);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);
}
