// Mocks generated by Mockito 5.4.4 from annotations
// in mtg_picker/test/ui/controllers/favorite_controller/favorite_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:mtg_picker/application/repository/favorite/favorite_card_repository.dart'
    as _i6;
import 'package:mtg_picker/application/repository/repository_error.dart' as _i5;
import 'package:mtg_picker/domain/entities/card/card.dart' as _i3;
import 'package:mtg_picker/domain/entities/favorite/favorite_card/favorite_card.dart'
    as _i4;
import 'package:mtg_picker/internal/entities/either.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCards_1 extends _i1.SmartFake implements _i3.Cards {
  _FakeCards_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _Fake$FavoriteCardCopyWith_2<$Res> extends _i1.SmartFake
    implements _i4.$FavoriteCardCopyWith<$Res> {
  _Fake$FavoriteCardCopyWith_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _Fake$CardsCopyWith_3<$Res> extends _i1.SmartFake
    implements _i3.$CardsCopyWith<$Res> {
  _Fake$CardsCopyWith_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RepositoryError].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepositoryError extends _i1.Mock implements _i5.RepositoryError {}

/// A class which mocks [FavoriteCardRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavoriteCardRepository extends _i1.Mock
    implements _i6.FavoriteCardRepository {
  @override
  _i7.Future<_i2.Either<_i5.RepositoryError, List<_i4.FavoriteCard>>>
      getFavoriteCards() => (super.noSuchMethod(
            Invocation.method(
              #getFavoriteCards,
              [],
            ),
            returnValue: _i7.Future<
                    _i2
                    .Either<_i5.RepositoryError, List<_i4.FavoriteCard>>>.value(
                _FakeEither_0<_i5.RepositoryError, List<_i4.FavoriteCard>>(
              this,
              Invocation.method(
                #getFavoriteCards,
                [],
              ),
            )),
            returnValueForMissingStub: _i7.Future<
                    _i2
                    .Either<_i5.RepositoryError, List<_i4.FavoriteCard>>>.value(
                _FakeEither_0<_i5.RepositoryError, List<_i4.FavoriteCard>>(
              this,
              Invocation.method(
                #getFavoriteCards,
                [],
              ),
            )),
          ) as _i7
              .Future<_i2.Either<_i5.RepositoryError, List<_i4.FavoriteCard>>>);

  @override
  _i7.Future<
      _i2.Either<_i5.RepositoryError, _i4.FavoriteCard>> createFavoriteCard(
          _i3.Cards? cards) =>
      (super.noSuchMethod(
        Invocation.method(
          #createFavoriteCard,
          [cards],
        ),
        returnValue:
            _i7.Future<_i2.Either<_i5.RepositoryError, _i4.FavoriteCard>>.value(
                _FakeEither_0<_i5.RepositoryError, _i4.FavoriteCard>(
          this,
          Invocation.method(
            #createFavoriteCard,
            [cards],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i2.Either<_i5.RepositoryError, _i4.FavoriteCard>>.value(
                _FakeEither_0<_i5.RepositoryError, _i4.FavoriteCard>(
          this,
          Invocation.method(
            #createFavoriteCard,
            [cards],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i5.RepositoryError, _i4.FavoriteCard>>);

  @override
  _i7.Future<_i2.Either<_i5.RepositoryError, bool>> deleteFavoriteCard(
          String? uuid) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteFavoriteCard,
          [uuid],
        ),
        returnValue: _i7.Future<_i2.Either<_i5.RepositoryError, bool>>.value(
            _FakeEither_0<_i5.RepositoryError, bool>(
          this,
          Invocation.method(
            #deleteFavoriteCard,
            [uuid],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i2.Either<_i5.RepositoryError, bool>>.value(
                _FakeEither_0<_i5.RepositoryError, bool>(
          this,
          Invocation.method(
            #deleteFavoriteCard,
            [uuid],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i5.RepositoryError, bool>>);
}

/// A class which mocks [FavoriteCard].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavoriteCard extends _i1.Mock implements _i4.FavoriteCard {
  @override
  String get uuid => (super.noSuchMethod(
        Invocation.getter(#uuid),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#uuid),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#uuid),
        ),
      ) as String);

  @override
  _i3.Cards get card => (super.noSuchMethod(
        Invocation.getter(#card),
        returnValue: _FakeCards_1(
          this,
          Invocation.getter(#card),
        ),
        returnValueForMissingStub: _FakeCards_1(
          this,
          Invocation.getter(#card),
        ),
      ) as _i3.Cards);

  @override
  _i4.$FavoriteCardCopyWith<_i4.FavoriteCard> get copyWith =>
      (super.noSuchMethod(
        Invocation.getter(#copyWith),
        returnValue: _Fake$FavoriteCardCopyWith_2<_i4.FavoriteCard>(
          this,
          Invocation.getter(#copyWith),
        ),
        returnValueForMissingStub:
            _Fake$FavoriteCardCopyWith_2<_i4.FavoriteCard>(
          this,
          Invocation.getter(#copyWith),
        ),
      ) as _i4.$FavoriteCardCopyWith<_i4.FavoriteCard>);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [Cards].
///
/// See the documentation for Mockito's code generation for more information.
class MockCards extends _i1.Mock implements _i3.Cards {
  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  String get manaCost => (super.noSuchMethod(
        Invocation.getter(#manaCost),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#manaCost),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#manaCost),
        ),
      ) as String);

  @override
  String get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#type),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#type),
        ),
      ) as String);

  @override
  String get rarity => (super.noSuchMethod(
        Invocation.getter(#rarity),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#rarity),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#rarity),
        ),
      ) as String);

  @override
  String get imageUrl => (super.noSuchMethod(
        Invocation.getter(#imageUrl),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#imageUrl),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#imageUrl),
        ),
      ) as String);

  @override
  _i3.$CardsCopyWith<_i3.Cards> get copyWith => (super.noSuchMethod(
        Invocation.getter(#copyWith),
        returnValue: _Fake$CardsCopyWith_3<_i3.Cards>(
          this,
          Invocation.getter(#copyWith),
        ),
        returnValueForMissingStub: _Fake$CardsCopyWith_3<_i3.Cards>(
          this,
          Invocation.getter(#copyWith),
        ),
      ) as _i3.$CardsCopyWith<_i3.Cards>);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);
}
